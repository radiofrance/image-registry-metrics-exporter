package metrics

import (
	"fmt"
	"net/http"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	log "github.com/sirupsen/logrus"
)

// metricsExporterConf is a struct which contains config to generate metrics on an images tags set.
type metricsExporterConf struct {
	MetricsUploadedTime *prometheus.GaugeVec
	MetricsCreatedTime  *prometheus.GaugeVec
	Registry            *prometheus.Registry
	Queue               chan Job
}

// Job contains data digests by workers generated by GenerateMetricsOn.
type Job struct {
	ImageName string
	TagName   string
	Metadata  TagMetadata
}

// TagMetadata contains all metadata of a Tag.
type TagMetadata struct {
	Created  time.Time
	Uploaded time.Time
}

// New generate a metricsExporterConf struct.
func New() (*metricsExporterConf, error) {
	tag := metricsExporterConf{}
	tag.Queue = make(chan Job)
	tag.MetricsUploadedTime = prometheus.NewGaugeVec(prometheus.GaugeOpts{
		Name: "container_image_tag_uploaded_timestamp",
		Help: "Upload timestamp of this container image tag",
	}, []string{"image", "tag"})
	tag.MetricsCreatedTime = prometheus.NewGaugeVec(prometheus.GaugeOpts{
		Name: "container_image_tag_build_timestamp",
		Help: "Build timestamp of this container image tag",
	}, []string{"image", "tag"})

	if err := prometheus.DefaultRegisterer.Register(tag.MetricsUploadedTime); err != nil {
		return &tag, fmt.Errorf("cannot register metrics : %w", err)
	}
	if err := prometheus.DefaultRegisterer.Register(tag.MetricsCreatedTime); err != nil {
		return &tag, fmt.Errorf("cannot register metrics : %w", err)
	}
	return &tag, nil
}

func (tag *metricsExporterConf) worker() {
	for data := range tag.Queue {
		log.Infof("updating metrics for %s:%s", data.ImageName, data.TagName)
		tag.MetricsUploadedTime.
			With(prometheus.Labels{"image": data.ImageName, "tag": data.TagName}).
			Set(float64(data.Metadata.Uploaded.Unix()))
		tag.MetricsCreatedTime.
			With(
				prometheus.Labels{"image": data.ImageName, "tag": data.TagName}).
			Set(float64(data.Metadata.Created.Unix()))
	}
}

// Handler wrap promhttp http.Handler.
func Handler() http.Handler {
	return promhttp.Handler()
}

// GenerateMetricsOn create jobs to consume Queue and publish metrics on prom.
func (tag *metricsExporterConf) GenerateMetricsOn() {
	for w := 1; w <= 3; w++ {
		go tag.worker()
	}
}
